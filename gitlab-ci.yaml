# In Order to interact with AWS Account, the GitLab CI/CD pipelines require both
# AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY to be defined in your GitLab settings
# Under Settings > CI/CD > Variables

image: "docker:stable"

stages:
  - build
  - test
  - validate
  - package
  - infraDeploy


template-validation:
  image: "python:3.6-alpine"
  stage: validate
  needs: [template-linting]
  before_script:
    - pip install awscli==1.18.133
  script:
    - cd cloudformation/
    - >
      for i in `find . -type f \( \( -name 'vm-managed*.yml' -o -name 'vm-managed*.yaml' \) \)`; do
      aws cloudformation validate-template --template-body file://$i --region ${AWS_DEFAULT_REGION} || {
          c=$?
          echo -e "Cloudformation Template Validation failed for file: $i \nExit code: $c";
          exit 1;
      };
      done
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^develop/
      changes:
        - cloudformation/**/*
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_COMMIT_BRANCH =~ /^develop/ && $DEPLOY_TRIGGER == "TRUE"'
      when: manual
    - if: '$CI_COMMIT_TAG  =~ /^release/'

zip-creation:
  image: "python:3.7"
  stage: package
  needs: [template-linting]
  before_script:
    - apt update
    - apt install zip -y
    - pip install awscli
  script:
    - cd cloudformation/
    - zip -j buildspec.zip chatbot-infra/buildspec.yml
    - mkdir packages
    - >
      for i in `find . -type f \( \( -name 'vm-managed*.yml' -o -name 'vm-managed*.yaml' -o -name 'vm-managed*.json' \) \)`; do
      cp $i ./packages || {
          c=$?
          echo -e "Something went wrong while copying files: $i \nExit code: $c";
          exit 1;
      };
      done
    - cd packages
    - zip -r vm-managed-chatbot-infra.zip *
    - zip -j vm-managed-chatbot-lambda.zip ../../lambda/vm-managed-dev-chatbot-lambda/lambda_function.py
  artifacts:
    paths:
      - cloudformation/buildspec.zip
      - cloudformation/packages/vm-managed-chatbot-infra.zip
      - cloudformation/packages/vm-managed-chatbot-lambda.zip
    expire_in: 3 day
  rules:
    - if: '$CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_COMMIT_BRANCH !~ /^release/'
      changes:
        - cloudformation/**/*
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_COMMIT_BRANCH =~ /^develop/ && $DEPLOY_TRIGGER == "TRUE"'
      when: manual
    - if: '$CI_COMMIT_TAG  =~ /^release/'

.deployInfraGitLab:
  image: "python:3.7"
  before_script:
    - apt update
    - apt-get install jq unzip -y
    - pip install awscli
  script:
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_OVERRIDE
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_OVERRIDE
    - cd cloudformation/packages/
    - unzip vm-managed-chatbot-infra.zip
    - aws s3 sync . s3://vm-managed-${ENVIRONMENT}-chatbot-infra
    - aws cloudformation deploy --template-file vm-managed-chatbot-master-template.yml --stack-name vm-managed-${ENVIRONMENT}-chatbot-infra --role-arn arn:aws:iam::${ACCOUNT}:role/vm-managed-${ENVIRONMENT}-chatbot-cfn-role --capabilities CAPABILITY_NAMED_IAM  --parameter-overrides $(jq -r '.Parameters | to_entries []| "\(.key)=\(.value)"' vm-managed-${ENVIRONMENT}-chatbot-configuration.json |tr '\n' ' ')

deployInfraItg:
  stage: infraDeploy
  extends: .deployInfraGitLab
  variables:
    AWS_REGION: $AWS_REGION
    AWS_ACCESS_KEY_ID_OVERRIDE: $AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY_OVERRIDE: $AWS_SECRET_ACCESS_KEY
    ENVIRONMENT: itg
    ACCOUNT: 863631259710
  needs: ["zip-creation"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_PIPELINE_SOURCE != "schedule"'
      changes:
        - cloudformation/**/*
        - lambda/**/*
      when: manual
    - if: '$CI_COMMIT_BRANCH == "develop" && $DEPLOY_TRIGGER == "TRUE"'
      when: manual

